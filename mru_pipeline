#!/bin/bash
# this script runs pygrasp on raw data transferred to a local directory

function set_vars() {

	filter_string="DYNAMIC"
	# filter_string="STARVIBE_6min"
	# filter_string="STARVIBE_DYNAMIC"

	# set variables
	# return variables
	env_path="$HOME/miniconda3/envs"
	code_path="/fileserver/fastscratch/liam/mru/pygrasp/pyGRASP/"
	# subject_info_path="/fileserver/external/body/radialData/subject_info/"
	# needs to be set by mounting the smb share
	raw_data_path="/mnt/simon_server/RawDataStore/"
	input_path="/home/ch243636/Documents/pygrasp_data/queue/"
	# output_path="/fileserver/external/body/radialData/processed/"
	working_path="/home/ch243636/Documents/pygrasp_data/working/"
	output_path="/fileserver/external/body/radialData/processed/reruns"
	recon_path="/fileserver/external/body/abd/GraspRecons/reconResultsGRASP/reruns/"
	export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:"$env_path"/dce_env/lib
}

function copy_done() {
	# copy done files to output path
	# folders that are completed have 7 items

	find "$working_path" -type d -exec sh -c 'test $(ls -1 "{}" | wc -l) -eq 7' \; -print >/tmp/done.txt
	echo $(cat /tmp/done.txt)

	# in parallel
	cat /tmp/done.txt | xargs -P4 -I '{}' rsync -azchP '{}' "$output_path"

	# remove done folders from working path
	cat /tmp/done.txt | xargs -P4 -I '{}' rm -rf '{}'

}

function precheck() {
	# check for dependencies
	# check for conda

	# check code path
	if [ -d "$code_path" ]; then
		echo "Code path exists"
	else
		echo "Code path $code_path does not exist"
		exit
	fi

	mkdir -p $input_path
	mkdir -p $working_path
	mkdir -p $output_path

	# check raw data path
	if [ -d "$raw_data_path" ]; then
		echo "Raw data path exists"
	else
		echo "Raw data path $raw_data_path does not exist"
		exit
	fi

	which conda
	if [ $? -eq 0 ]; then
		echo "Conda is installed"
	else
		echo "Conda is not installed"
		exit
	fi

	# check for environment
	env_name="dce_env"
	conda env list | grep -q "^${env_name}[[:space:]]"
	if [ $? -eq 0 ]; then
		echo "Environment $env_name exists"
	else
		echo "Environment $env_name does not exist"
		echo "Creating environment $env_name"
		conda env create --file $code_path/environment.yml
	fi
}

function find_data() {
	# find data to transfer
	# find files with .dat extension
	# compare to processed or processing data
	echo "Looking in $raw_data_path for files with extension .dat"
	raw_data_list=$(find $raw_data_path -name "*.dat" -type f -printf "%f\n" -mtime -90 -size +2G | grep $filter_string | sort)

	queued_list=$(find $input_path -name "*.dat" -type f -printf "%f\n" -size +2G | sort)
	echo "found queued list:" $queued_list
	processing_list=$(find $output_path -name "*.dat" -type f -printf "%f\n" | sort)
	echo "found processed list:" $processing_list
	working_list=$(find $working_path -name "*.dat" -type f -printf "%f\n" | sort)
	echo "found working_list list:" $working_list
	# filter raw_data_list to only include files not in queued_list, processing_list, or working_list
	raw_data_list=$(comm -23 <(echo "$raw_data_list") <(echo "$queued_list") | comm -23 - <(echo "$processing_list") | comm -23 - <(echo "$working_list"))
	echo "Raw data list: $raw_data_list"
}

function transfer_data() {
	# transfer data to local directory
	for file in $raw_data_list; do
		# get full path now
		file_path=$(find $raw_data_path -name "$file" -type f)
		# file_path=$(fdfind -e dat -i "$file" -t f -p $raw_data_path)
		echo "File path: $file_path to $input_path"
		# cp $raw_data_path/$file $input_path
		# check input path is a file
		if [ -f "$file_path" ]; then
			rsync -azvhP --progress "$file_path" "$input_path"
			echo "File $file_path transferred"
		fi
	done
}

function find_queued_data() {
	# find files with .dat extension
	queued_list=$(find $input_path -size +2097151k -name "*.dat" -type f -printf "%f\n" | sort)
	# echo $queued_list
	queued_list=$(echo "$queued_list" | grep $filter_string | sort)
	echo $queued_list
	queued_list=$(comm -23 <(echo "$queued_list") <(echo "$processing_list"))
}

function make_mru_csv() {
	# make mru csv
	# return mru csv path
	echo "Names,Acquisition Date,MRN,reconFile1,reconFile2,reconFile3,reconFile4,timePoints1,timePoints2,timePoints3,timePoints4" >$inputOutput_path/MRU.csv
	data_path="$inputOutput_path"/"$file"
	echo "$name,$acq_date,$mrn,$data_path,,,,156,,," >>$inputOutput_path/MRU.csv
}

function run_pygrasp() {
	cat "$inputOutput_path/MRU.csv"

	$env_path/dce_env/bin/python3.7 $code_path/convert_raw_to_dataset.py -i $inputOutput_path/MRU.csv -pg $code_path/parameters/grasp_params.json -pp $code_path/parameters/p_proc_params.json -o $inputOutput_path -fr True -fc True -nspkc 500 -igpu True

	$env_path/dce_env/bin/python3.7 $code_path/demo_reconstruction.py -p $code_path/parameters/grasp_params.json -d $inputOutput_path/loader.csv -o $inputOutput_path/ -sid sub-1

	$env_path/dce_env/bin/python3.7 $code_path/slice_to_vol.py -p $code_path/parameters/p_proc_params.json -d $inputOutput_path/sub-1/*/raw-rec/ -o $inputOutput_path/sub-1/
}

function set_info() {
	name_and_id=$(read_twix_identifiers "${input_path}/${file}")
	name=$(echo "$name_and_id" | cut -d ' ' -f 1 | grep -v 'xxxxx')
	mrn=$(echo "$name_and_id" | cut -d ' ' -f 2 | grep -v 'xxxxx')
	name="${name:=Lastname_Firstname}"
	name="$(echo ${name} | awk 'BEGIN{FS=OFS="_"} {for (i=1; i<=NF; i++) $i=toupper(substr($i,1,1)) tolower(substr($i,2))} 1')"
	if [ "$name" == "Lastname_Firstname" ]; then
		echo "Subject name not found in raw data, checking spreadsheet."

	fi

	mrn="${mrn:=MRN}"
	date_section=$(echo "$file" | grep -o 'D[0-9]\{6\}' | cut -d 'D' -f 2)
	day="${date_section:0:2}"
	month="${date_section:2:2}"
	year="${date_section:4:2}"
	formatted_date="20${year}${month}${day}"
	alt_formatted_date="${month}-${day}-20${year}"
	acq_date="${formatted_date:=YYYYMMDD}"
	time=$(echo "$file" | grep -o 'T[0-9]\{6\}' | cut -d 'F' -f 2)
	base_name="$(basename "$file" .dat)"

}

function clear_info() {
	unset name
	unset mrn
	unset acq_date
}

function process_list() {
	for file in $queued_list; do
		echo "starting: $file"
		set_info
		if [ "$name" == "Lastname_Firstname" ]; then
			echo "Subject name not found in raw data, using file base name."
			dir_name="${base_name}"
		fi
		dir_name="${name}-MRN${mrn}-${alt_formatted_date}"

		inputOutput_path="${working_path}/${dir_name}"
		# make a working directory for the file
		mkdir -p "$inputOutput_path"
		mv "${input_path}/${file}" "${inputOutput_path}"
		# step 3: setup pygrasp
		make_mru_csv
		# step 4: run pygrasp
		echo "Running pygrasp on $file"
		run_pygrasp
		# step 5: transfer results
		# copy_done
	done
}

function move_nifit_to_graprecon_results() {
	echo "blah"
}

function main() {
	set_vars
	precheck
	copy_done
	# step 1: check for data to transfer
	# find_data
	# step 2: transfer data
	# transfer_data
	find_queued_data
	echo "found queued list" "$queued_list"
	process_list
	# transfer_data
	# step 6: clean up
}

main
